datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    email        String   @unique
    passwordHash String?  @map("password_hash")
    provider     String?
    createdAt    DateTime @default(now()) @map("created_at")

    // Relations
    adventures Adventure[]

    @@map("users")
}

model Adventure {
    id                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                String          @map("user_id") @db.Uuid
    status                AdventureStatus @default(PLANNED)
    failureReason         String?         @map("failure_reason")
    plannedDistanceMeters Float           @map("planned_distance_meters")
    waypointCount         Int             @default(0) @map("waypoint_count")
    createdAt             DateTime        @default(now()) @map("created_at")

    // Relations
    user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    waypoints AdventureWaypoint[]
    routes    Route[]

    @@map("adventures")
}

model AdventureWaypoint {
    id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    adventureId  String       @map("adventure_id") @db.Uuid
    sequence     Int
    waypointType WaypointType @map("waypoint_type")
    poiCategory  String?      @map("poi_category")
    latitude     Float
    longitude    Float
    locationName String?      @map("location_name")
    poiSourceId  String?      @map("poi_source_id")
    poiSource    String?      @map("poi_source")
    address      String?
    createdAt    DateTime     @default(now()) @map("created_at")

    // Relations
    adventure  Adventure @relation(fields: [adventureId], references: [id], onDelete: Cascade)
    routesFrom Route[]   @relation("FromWaypoint")
    routesTo   Route[]   @relation("ToWaypoint")

    @@unique([adventureId, sequence])
    @@map("adventures_waypoints")
}

model Route {
    id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    adventureId        String   @map("adventure_id") @db.Uuid
    fromWaypointId     String?  @map("from_waypoint_id") @db.Uuid
    toWaypointId       String   @map("to_waypoint_id") @db.Uuid
    routeJson          Json     @map("route_json")
    distanceMeters     Float    @map("distance_meters")
    durationMinutes    Int      @map("duration_minutes")
    transportationMode String   @default("walking") @map("transportation_mode")
    createdAt          DateTime @default(now()) @map("created_at")

    // Relations
    adventure    Adventure          @relation(fields: [adventureId], references: [id], onDelete: Cascade)
    fromWaypoint AdventureWaypoint? @relation("FromWaypoint", fields: [fromWaypointId], references: [id])
    toWaypoint   AdventureWaypoint  @relation("ToWaypoint", fields: [toWaypointId], references: [id])

    @@map("routes")
}

// Enumsで状態と種別管理
enum AdventureStatus {
    PLANNED     @map("planned")
    IN_PROGRESS @map("in_progress")
    COMPLETED   @map("completed")
    FAILED      @map("failed")
}

enum WaypointType {
    START        @map("start")
    INTERMEDIATE @map("intermediate")
    DESTINATION  @map("destination")
}
